local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local Linux = {
Themes = {
  Default = {
    Primary = Color3.fromRGB(52, 152, 219),
    Secondary = Color3.fromRGB(41, 128, 185),
    Background = Color3.fromRGB(10, 10, 15),
    CardBackground = Color3.fromRGB(15, 15, 25),
    Border = Color3.fromRGB(25, 25, 35),
    Text = Color3.fromRGB(220, 220, 240),
    SubText = Color3.fromRGB(150, 150, 180),
    Accent = Color3.fromRGB(52, 152, 219)
  }
},
ActiveTheme = nil
}

Linux.ActiveTheme = Linux.Themes.Default

function Linux.Instance(class, props)
local inst = Instance.new(class)
for k, v in pairs(props or {}) do
  inst[k] = v
end
return inst
end

function Linux:SafeCallback(Function, ...)
if not Function then
  return
end
local Success, Error = pcall(Function, ...)
if not Success then
  self:Notify({
    Title = "Callback Error",
    Content = Error:match(".-:(.+)$") or tostring(Error),
    Duration = 5
  })
end
end

local function IsExecutorValid()
local success = pcall(function()
  return isfolder and makefolder and isfile and readfile and writefile
end)
return success
end

function Linux:SaveConfig(key, value, shouldSave, configFolder)
if not shouldSave or not IsExecutorValid() then return end
local success, err = pcall(function()
  if not isfolder(configFolder) then
    makefolder(configFolder)
  end
  local configFile = configFolder .. "/config.json"
  local configData = {}
  if isfile(configFile) then
    configData = HttpService:JSONDecode(readfile(configFile))
  end
  configData[key] = value
  writefile(configFile, HttpService:JSONEncode(configData))
end)
if not success then
  self:Notify({
    Title = "Save Error",
    Content = "Failed to save config: " .. tostring(err),
    Duration = 5
  })
end
end

function Linux:LoadConfig(key, default, shouldSave, configFolder)
if not shouldSave or not IsExecutorValid() then return default end
local success, value = pcall(function()
  local configFile = configFolder .. "/config.json"
  if isfile(configFile) then
    local configData = HttpService:JSONDecode(readfile(configFile))
    return configData[key]
  end
  return default
end)
return success and value or default
end

function Linux:Notify(config)
local isMobile = InputService.TouchEnabled and not InputService.KeyboardEnabled
local notificationWidth = isMobile and 200 or 300
local notificationHeight = config.SubContent and 80 or 60
local startPosX = isMobile and 10 or 20

local parent = RunService:IsStudio() and LocalPlayer.PlayerGui or game:GetService("CoreGui")
for _, v in pairs(parent:GetChildren()) do
  if v:IsA("ScreenGui") and v.Name == "NotificationHolder" then
    v:Destroy()
  end
end

local NotificationHolder = Linux.Instance("ScreenGui", {
  Name = "NotificationHolder",
  Parent = parent,
  ResetOnSpawn = false,
  Enabled = true,
  ZIndexBehavior = Enum.ZIndexBehavior.Sibling
})

local Notification = Linux.Instance("Frame", {
  Parent = NotificationHolder,
  BackgroundColor3 = Linux.ActiveTheme.Background,
  BorderColor3 = Linux.ActiveTheme.Border,
  BorderSizePixel = 2,
  Size = UDim2.new(0, notificationWidth, 0, notificationHeight),
  Position = UDim2.new(1, 10, 1, -notificationHeight - 10),
  ZIndex = 100
})

Linux.Instance("UICorner", {
  Parent = Notification,
  CornerRadius = UDim.new(0, 8)
})

Linux.Instance("UIStroke", {
  Parent = Notification,
  Color = Linux.ActiveTheme.Border,
  Thickness = 1,
  Transparency = 0.7
})

Linux.Instance("TextLabel", {
  Parent = Notification,
  BackgroundTransparency = 1,
  Size = UDim2.new(1, -10, 0, 20),
  Position = UDim2.new(0, 5, 0, 5),
  Font = Enum.Font.GothamBold,
  Text = config.Title or "Notification",
  TextColor3 = Linux.ActiveTheme.Text,
  TextSize = 16,
  TextXAlignment = Enum.TextXAlignment.Left,
  TextYAlignment = Enum.TextYAlignment.Top,
  ZIndex = 101
})

Linux.Instance("TextLabel", {
  Parent = Notification,
  BackgroundTransparency = 1,
  Size = UDim2.new(1, -10, 0, 20),
  Position = UDim2.new(0, 5, 0, 25),
  Font = Enum.Font.Gotham,
  Text = config.Content or "Content",
  TextColor3 = Linux.ActiveTheme.SubText,
  TextSize = 14,
  TextWrapped = true,
  TextXAlignment = Enum.TextXAlignment.Left,
  TextYAlignment = Enum.TextYAlignment.Top,
  ZIndex = 101
})

if config.SubContent then
  Linux.Instance("TextLabel", {
    Parent = Notification,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, -10, 0, 20),
    Position = UDim2.new(0, 5, 0, 45),
    Font = Enum.Font.Gotham,
    Text = config.SubContent,
    TextColor3 = Linux.ActiveTheme.Text,
    TextSize = 12,
    TextWrapped = true,
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Top,
    ZIndex = 101
  })
end

local ProgressBar = Linux.Instance("Frame", {
  Parent = Notification,
  BackgroundColor3 = Linux.ActiveTheme.Border,
  Size = UDim2.new(1, -10, 0, 4),
  Position = UDim2.new(0, 5, 1, -9),
  ZIndex = 101,
  BorderSizePixel = 0
})

Linux.Instance("UICorner", {
  Parent = ProgressBar,
  CornerRadius = UDim.new(0, 2)
})

local ProgressFill = Linux.Instance("Frame", {
  Parent = ProgressBar,
  BackgroundColor3 = Linux.ActiveTheme.Primary,
  Size = UDim2.new(0, 0, 1, 0),
  ZIndex = 101,
  BorderSizePixel = 0
})

Linux.Instance("UIGradient", {
  Parent = ProgressFill,
  Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Linux.ActiveTheme.Primary),
    ColorSequenceKeypoint.new(1, Linux.ActiveTheme.Secondary)
  }),
  Rotation = 45
})

Linux.Instance("UICorner", {
  Parent = ProgressFill,
  CornerRadius = UDim.new(0, 2)
})

local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
TweenService:Create(Notification, tweenInfo, {Position = UDim2.new(0, startPosX, 1, -notificationHeight - 10)}):Play()

if config.Duration then
  local progressTweenInfo = TweenInfo.new(config.Duration, Enum.EasingStyle.Linear, Enum.EasingDirection.In)
  TweenService:Create(ProgressFill, progressTweenInfo, {Size = UDim2.new(1, 0, 1, 0)}):Play()

  task.delay(config.Duration, function()
    TweenService:Create(Notification, tweenInfo, {Position = UDim2.new(1, 10, 1, -notificationHeight - 10)}):Play()
    task.wait(0.5)
    NotificationHolder:Destroy()
  end)
end
end

function Linux.Create(config)
local randomName = "LinuxUI_" .. tostring(math.random(100000, 999999))
local shouldSave = config.Save ~= false
local configFolder = config.ConfigFolder or "LinuxUI"

local parent = RunService:IsStudio() and LocalPlayer.PlayerGui or game:GetService("CoreGui")
for _, v in pairs(parent:GetChildren()) do
  if v:IsA("ScreenGui") and v.Name:match("^LinuxUI_%d+$") then
    v:Destroy()
  end
end

local ProtectGui = function(gui)
  if syn and syn.protect_gui then
    syn.protect_gui(gui)
  elseif protectgui then
    protectgui(gui)
  elseif gethui then
    gui.Parent = gethui()
    return true
  end
  return false
end

local LinuxUI = Linux.Instance("ScreenGui", {
  Name = randomName,
  Parent = parent,
  ResetOnSpawn = false,
  Enabled = true,
  ZIndexBehavior = Enum.ZIndexBehavior.Sibling
})

local protected = ProtectGui(LinuxUI)
if not protected then
  LinuxUI.Parent = parent
end

local isMobile = InputService.TouchEnabled and not InputService.KeyboardEnabled
local uiSize = isMobile and (config.SizeMobile or UDim2.fromOffset(300, 500)) or (config.SizePC or UDim2.fromOffset(550, 355))

local Main = Linux.Instance("Frame", {
  Parent = LinuxUI,
  BackgroundColor3 = Linux.ActiveTheme.Background,
  BorderColor3 = Linux.ActiveTheme.Border,
  BorderSizePixel = 2,
  Size = uiSize,
  Position = UDim2.new(0.5, -uiSize.X.Offset / 2, 0.5, -uiSize.Y.Offset / 2),
  Active = true,
  Draggable = true,
  ZIndex = 1
})

Linux.Instance("UICorner", {
  Parent = Main,
  CornerRadius = UDim.new(0, 8)
})

Linux.Instance("UIStroke", {
  Parent = Main,
  Color = Linux.ActiveTheme.Border,
  Thickness = 1,
  Transparency = 0.7
})

local TopBar = Linux.Instance("Frame", {
  Parent = Main,
  BackgroundColor3 = Linux.ActiveTheme.Background,
  BorderColor3 = Linux.ActiveTheme.Border,
  BorderSizePixel = 2,
  Size = UDim2.new(1, 0, 0, 30),
  ZIndex = 2
})

Linux.Instance("UICorner", {
  Parent = TopBar,
  CornerRadius = UDim.new(0, 8)
})

Linux.Instance("UIGradient", {
  Parent = TopBar,
  Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Linux.ActiveTheme.Background),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(
      math.clamp(Linux.ActiveTheme.Background.R * 1.2 * 255, 0, 255),
      math.clamp(Linux.ActiveTheme.Background.G * 1.2 * 255, 0, 255),
      math.clamp(Linux.ActiveTheme.Background.B * 1.2 * 255, 0, 255)
    ))
  }),
  Rotation = 90
})

local TitleLabel = Linux.Instance("TextLabel", {
  Parent = TopBar,
  BackgroundTransparency = 1,
  Size = UDim2.new(1, 0, 1, 0),
  Position = UDim2.new(0, 10, 0, 0),
  Font = Enum.Font.GothamBold,
  Text = config.Name or "Linux UI",
  TextColor3 = Linux.ActiveTheme.Text,
  TextSize = 16,
  TextXAlignment = Enum.TextXAlignment.Left,
  ZIndex = 2
})

local isHidden = false

InputService.InputBegan:Connect(function(input)
  if input.KeyCode == (config.ToggleKey or Enum.KeyCode.LeftAlt) then
    isHidden = not isHidden
    LinuxUI.Enabled = not isHidden
  end
end)

local TabsBar = Linux.Instance("Frame", {
  Parent = Main,
  BackgroundTransparency = 1,
  Position = UDim2.new(0, 0, 0, 30),
  Size = UDim2.new(0, config.TabWidth or 130, 1, -30),
  ZIndex = 2,
  BorderSizePixel = 0
})

local TabHolder = Linux.Instance("ScrollingFrame", {
  Parent = TabsBar,
  BackgroundTransparency = 1,
  Position = UDim2.new(0, 0, 0, 0),
  Size = UDim2.new(1, 0, 1, 0),
  CanvasSize = UDim2.new(0, 0, 0, 0),
  AutomaticCanvasSize = Enum.AutomaticSize.Y,
  ScrollBarThickness = 2,
  ScrollBarImageColor3 = Linux.ActiveTheme.Primary,
  ZIndex = 2,
  BorderSizePixel = 0,
  ScrollingEnabled = true
})

Linux.Instance("UIListLayout", {
  Parent = TabHolder,
  Padding = UDim.new(0, 5),
  HorizontalAlignment = Enum.HorizontalAlignment.Left,
  VerticalAlignment = Enum.VerticalAlignment.Top,
  SortOrder = Enum.SortOrder.LayoutOrder
})

Linux.Instance("UIPadding", {
  Parent = TabHolder,
  PaddingLeft = UDim.new(0, 8),
  PaddingTop = UDim.new(0, 8),
  PaddingBottom = UDim.new(0, 8)
})

local Content = Linux.Instance("Frame", {
  Parent = Main,
  BackgroundTransparency = 1,
  Position = UDim2.new(0, config.TabWidth or 130, 0, 30),
  Size = UDim2.new(1, -(config.TabWidth or 130), 1, -30),
  ZIndex = 1,
  BorderSizePixel = 0
})

local Separator = Linux.Instance("Frame", {
  Parent = Main,
  BackgroundColor3 = Linux.ActiveTheme.Border,
  BorderSizePixel = 0,
  Position = UDim2.new(0, config.TabWidth or 130, 0, 30),
  Size = UDim2.new(0, 1, 1, -30),
  ZIndex = 2
})

local LinuxLib = {}
local Tabs = {}
local CurrentTab = nil
local tabOrder = 0

function LinuxLib.Tab(config)
  tabOrder = tabOrder + 1
  local tabIndex = tabOrder

  local TabBtn = Linux.Instance("TextButton", {
    Parent = TabHolder,
    BackgroundColor3 = Linux.ActiveTheme.CardBackground,
    BorderColor3 = Linux.ActiveTheme.Border,
    BorderSizePixel = 2,
    Size = UDim2.new(1, -10, 0, 32),
    Font = Enum.Font.Gotham,
    Text = "",
    TextColor3 = Linux.ActiveTheme.Text,
    TextSize = 14,
    ZIndex = 2,
    AutoButtonColor = false,
    LayoutOrder = tabIndex
  })

  Linux.Instance("UICorner", {
    Parent = TabBtn,
    CornerRadius = UDim.new(0, 8)
  })

  Linux.Instance("UIStroke", {
    Parent = TabBtn,
    Color = Linux.ActiveTheme.Border,
    Thickness = 1,
    Transparency = 0.7
  })

  local TabGradient
  local TabIcon
  if config.Icon and config.Icon.Enabled then
    TabIcon = Linux.Instance("ImageLabel", {
      Parent = TabBtn,
      BackgroundTransparency = 1,
      Size = UDim2.new(0, 16, 0, 16),
      Position = UDim2.new(0, 10, 0.5, -8),
      Image = config.Icon.Image or "rbxassetid://10747384394",
      ImageColor3 = Linux.ActiveTheme.Text,
      ZIndex = 2
    })
  end

  local TabText = Linux.Instance("TextLabel", {
    Parent = TabBtn,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, config.Icon and config.Icon.Enabled and -31 or -15, 1, 0),
    Position = UDim2.new(0, config.Icon and config.Icon.Enabled and 31 or 10, 0, 0),
    Font = Enum.Font.GothamSemibold,
    Text = config.Name,
    TextColor3 = Linux.ActiveTheme.Text,
    TextSize = 14,
    TextXAlignment = Enum.TextXAlignment.Left,
    ZIndex = 2
  })

  local TabContent = Linux.Instance("Frame", {
    Parent = Content,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Visible = false,
    ZIndex = 1,
    BorderSizePixel = 0
  })

  local Container = Linux.Instance("ScrollingFrame", {
    Parent = TabContent,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, -15, 1, -55),
    Position = UDim2.new(0, 5, 0, 40),
    CanvasSize = UDim2.new(0, 0, 0, 0),
    AutomaticCanvasSize = Enum.AutomaticSize.Y,
    ScrollBarThickness = 3,
    ScrollBarImageColor3 = Linux.ActiveTheme.Primary,
    ZIndex = 1,
    BorderSizePixel = 0,
    ScrollingEnabled = true,
    CanvasPosition = Vector2.new(0, 0)
  })

  local ContainerListLayout = Linux.Instance("UIListLayout", {
    Parent = Container,
    Padding = UDim.new(0, 6),
    HorizontalAlignment = Enum.HorizontalAlignment.Left,
    SortOrder = Enum.SortOrder.LayoutOrder
  })

  Linux.Instance("UIPadding", {
    Parent = Container,
    PaddingLeft = UDim.new(0, 5),
    PaddingTop = UDim.new(0, 5),
    PaddingRight = UDim.new(0, 5),
    PaddingBottom = UDim.new(0, 5)
  })

  local TitleFrame = Linux.Instance("Frame", {
    Parent = TabContent,
    BackgroundColor3 = Linux.ActiveTheme.Background,
    BorderSizePixel = 0,
    Size = UDim2.new(1, -10, 0, 35),
    Position = UDim2.new(0, 5, 0, 0),
    Visible = false,
    ZIndex = 3
  })

  local TitleLabel = Linux.Instance("TextLabel", {
    Parent = TitleFrame,
    BackgroundTransparency = 1,
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0, 0, 0, 0),
    Font = Enum.Font.GothamBold,
    Text = config.Name,
    TextColor3 = Linux.ActiveTheme.Text,
    TextSize = 22,
    TextXAlignment = Enum.TextXAlignment.Left,
    TextYAlignment = Enum.TextYAlignment.Center,
    ZIndex = 4
  })

  local function SelectTab()
    for _, tab in pairs(Tabs) do
      tab.Content.Visible = false
      tab.TitleFrame.Visible = false
      tab.Text.TextColor3 = Linux.ActiveTheme.Text
      tab.Button.BackgroundColor3 = Linux.ActiveTheme.CardBackground
      for _, child in pairs(tab.Button:GetChildren()) do
        if child:IsA("UIGradient") then
          child:Destroy()
        end
      end
      if tab.Icon then
        tab.Icon.ImageColor3 = Linux.ActiveTheme.Text
      end
    end
    TabContent.Visible = true
    TitleFrame.Visible = true
    TabText.TextColor3 = Linux.ActiveTheme.Text
    TabBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabGradient = Linux.Instance("UIGradient", {
      Parent = TabBtn,
      Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Linux.ActiveTheme.Primary),
        ColorSequenceKeypoint.new(1, Linux.ActiveTheme.Secondary)
      }),
      Rotation = 45
    })
    if TabIcon then
      TabIcon.ImageColor3 = Linux.ActiveTheme.Text
    end
    CurrentTab = tabIndex
    Container.CanvasPosition = Vector2.new(0, 0)
  end

  TabBtn.MouseButton1Click:Connect(SelectTab)

  Tabs[tabIndex] = {
    Name = config.Name,
    Button = TabBtn,
    Text = TabText,
    Icon = TabIcon,
    Content = TabContent,
    TitleFrame = TitleFrame,
    Gradient = TabGradient
  }

  if tabOrder == 1 then
    SelectTab()
  end

  local TabElements = {}
  local elementOrder = 0
  local lastWasDropdown = false

  function TabElements.Button(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local BtnFrame = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 38),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = BtnFrame,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = BtnFrame,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local Btn = Linux.Instance("TextButton", {
      Parent = BtnFrame,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, 0, 0, 38),
      Position = UDim2.new(0, 0, 0, 0),
      Font = Enum.Font.GothamSemibold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2,
      AutoButtonColor = false
    })

    Linux.Instance("UIPadding", {
      Parent = Btn,
      PaddingLeft = UDim.new(0, 10)
    })

    local BtnIcon = Linux.Instance("ImageLabel", {
      Parent = BtnFrame,
      BackgroundTransparency = 1,
      Size = UDim2.new(0, 16, 0, 16),
      Position = UDim2.new(1, -26, 0.5, -8),
      Image = "rbxassetid://10709791437",
      ImageColor3 = Linux.ActiveTheme.Text,
      ZIndex = 2
    })

    local hoverColor = Color3.fromRGB(
      math.clamp(Linux.ActiveTheme.CardBackground.R * 1.1 * 255, 0, 255),
      math.clamp(Linux.ActiveTheme.CardBackground.G * 1.1 * 255, 0, 255),
      math.clamp(Linux.ActiveTheme.CardBackground.B * 1.1 * 255, 0, 255)
    )
    local originalColor = Linux.ActiveTheme.CardBackground
    local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local gradient = nil

    Btn.MouseEnter:Connect(function()
      TweenService:Create(BtnFrame, tweenInfo, {BackgroundColor3 = hoverColor, Size = UDim2.new(1, 0, 0, 38 * 1.02)}):Play()
    end)

    Btn.MouseLeave:Connect(function()
      TweenService:Create(BtnFrame, tweenInfo, {BackgroundColor3 = originalColor, Size = UDim2.new(1, 0, 0, 38)}):Play()
      if gradient then
        gradient:Destroy()
        gradient = nil
      end
    end)

    Btn.InputBegan:Connect(function(input)
      if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        TweenService:Create(BtnFrame, tweenInfo, {BackgroundColor3 = Color3.fromRGB(255, 255, 255)}):Play()
        if gradient then
          gradient:Destroy()
        end
        gradient = Linux.Instance("UIGradient", {
          Parent = BtnFrame,
          Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Linux.ActiveTheme.Primary),
            ColorSequenceKeypoint.new(1, Linux.ActiveTheme.Secondary)
          }),
          Rotation = 45
        })
      end
    end)

    Btn.InputEnded:Connect(function(input)
      if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        TweenService:Create(BtnFrame, tweenInfo, {BackgroundColor3 = originalColor, Size = UDim2.new(1, 0, 0, 38)}):Play()
        if gradient then
          gradient:Destroy()
          gradient = nil
        end
      end
    end)

    Btn.MouseButton1Click:Connect(function()
      spawn(function() Linux:SafeCallback(config.Callback) end)
    end)

    Container.CanvasPosition = Vector2.new(0, 0)
    return Btn
  end

  function TabElements.Toggle(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local Toggle = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 38),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = Toggle,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = Toggle,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    Linux.Instance("TextLabel", {
      Parent = Toggle,
      BackgroundTransparency = 1,
      Size = UDim2.new(0.8, 0, 0, 38),
      Position = UDim2.new(0, 10, 0, 0),
      Font = Enum.Font.GothamSemibold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local ToggleBox = Linux.Instance("Frame", {
      Parent = Toggle,
      BackgroundColor3 = Linux.ActiveTheme.Border,
      Size = UDim2.new(0, 40, 0, 20),
      Position = UDim2.new(1, -50, 0.5, -10),
      ZIndex = 2,
      BorderSizePixel = 0
    })

    Linux.Instance("UICorner", {
      Parent = ToggleBox,
      CornerRadius = UDim.new(1, 0)
    })

    Linux.Instance("UIStroke", {
      Parent = ToggleBox,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local ToggleCircle = Linux.Instance("Frame", {
      Parent = ToggleBox,
      BackgroundColor3 = Linux.ActiveTheme.Text,
      Size = UDim2.new(0, 16, 0, 16),
      Position = UDim2.new(0, 2, 0.5, -8),
      ZIndex = 3,
      BorderSizePixel = 0
    })

    Linux.Instance("UICorner", {
      Parent = ToggleCircle,
      CornerRadius = UDim.new(1, 0)
    })

    local Gradient = Linux.Instance("UIGradient", {
      Parent = ToggleBox,
      Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Linux.ActiveTheme.Primary),
        ColorSequenceKeypoint.new(1, Linux.ActiveTheme.Secondary)
      }),
      Rotation = 45,
      Enabled = false
    })

    local State = Linux:LoadConfig("Toggle_" .. config.Name, config.Default or false, shouldSave, configFolder)
    local isToggling = false

    local function UpdateToggle()
      if isToggling then return end
      isToggling = true
      local tween = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
      if State then
        Gradient.Enabled = true
        ToggleBox.BackgroundColor3 = Linux.ActiveTheme.Primary
        TweenService:Create(ToggleCircle, tween, {Position = UDim2.new(0, 22, 0.5, -8)}):Play()
      else
        Gradient.Enabled = false
        ToggleBox.BackgroundColor3 = Linux.ActiveTheme.Border
        TweenService:Create(ToggleCircle, tween, {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
      end
      task.wait(0.25)
      isToggling = false
    end

    UpdateToggle()
    spawn(function() Linux:SafeCallback(config.Callback, State) end)

    Toggle.InputBegan:Connect(function(input)
      if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1) and not isToggling then
        State = not State
        UpdateToggle()
        Linux:SaveConfig("Toggle_" .. config.Name, State, shouldSave, configFolder)
        spawn(function() Linux:SafeCallback(config.Callback, State) end)
      end
    end)

    Container.CanvasPosition = Vector2.new(0, 0)
    return Toggle
  end

  function TabElements.Dropdown(config)
    elementOrder = elementOrder + 1
    lastWasDropdown = true

    local Dropdown = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 38),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = Dropdown,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = Dropdown,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local DropdownButton = Linux.Instance("TextButton", {
      Parent = Dropdown,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, 0, 1, 0),
      Font = Enum.Font.GothamSemibold,
      Text = "",
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      ZIndex = 2,
      AutoButtonColor = false
    })

    Linux.Instance("TextLabel", {
      Parent = DropdownButton,
      BackgroundTransparency = 1,
      Size = UDim2.new(0.8, 0, 1, 0),
      Position = UDim2.new(0, 10, 0, 0),
      Font = Enum.Font.GothamSemibold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local Options = config.Options or {}
    local SelectedValue = Linux:LoadConfig("Dropdown_" .. config.Name, config.Default or (Options[1] or "None"), shouldSave, configFolder)

    local Selected = Linux.Instance("TextLabel", {
      Parent = DropdownButton,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, -50, 1, 0),
      Font = Enum.Font.Gotham,
      Text = tostring(SelectedValue),
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Right,
      ZIndex = 2
    })

    local Arrow = Linux.Instance("ImageLabel", {
      Parent = DropdownButton,
      BackgroundTransparency = 1,
      Size = UDim2.new(0, 16, 0, 16),
      Position = UDim2.new(1, -26, 0.5, -8),
      Image = "rbxassetid://10709767827",
      ImageColor3 = Linux.ActiveTheme.Text,
      ZIndex = 2
    })

    local DropFrame = Linux.Instance("ScrollingFrame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 0),
      CanvasSize = UDim2.new(0, 0, 0, 0),
      AutomaticCanvasSize = Enum.AutomaticSize.Y,
      ScrollBarThickness = 3,
      ScrollBarImageColor3 = Linux.ActiveTheme.Primary,
      ScrollingEnabled = true,
      ZIndex = 3,
      LayoutOrder = elementOrder + 1
    })

    Linux.Instance("UICorner", {
      Parent = DropFrame,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = DropFrame,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    Linux.Instance("UIListLayout", {
      Parent = DropFrame,
      Padding = UDim.new(0, 3),
      HorizontalAlignment = Enum.HorizontalAlignment.Left
    })

    Linux.Instance("UIPadding", {
      Parent = DropFrame,
      PaddingLeft = UDim.new(0, 5),
      PaddingTop = UDim.new(0, 5),
      PaddingRight = UDim.new(0, 5),
      PaddingBottom = UDim.new(0, 5)
    })

    local IsOpen = false

    local function UpdateDropSize()
      local optionHeight = 30
      local paddingBetween = 3
      local paddingTop = 5
      local maxHeight = 150
      local numOptions = #Options
      local calculatedHeight = numOptions * optionHeight + (numOptions > 0 and (numOptions - 1) * paddingBetween + paddingTop * 2 or 0)
      local finalHeight = math.min(calculatedHeight, maxHeight)

      local tween = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
      if IsOpen then
        TweenService:Create(DropFrame, tween, {Size = UDim2.new(1, 0, 0, finalHeight)}):Play()
        TweenService:Create(Arrow, tween, {Rotation = 180}):Play()
      else
        TweenService:Create(DropFrame, tween, {Size = UDim2.new(1, 0, 0, 0)}):Play()
        TweenService:Create(Arrow, tween, {Rotation = 0}):Play()
      end
      task.wait(0.25)
    end

    local function PopulateOptions()
      for _, child in pairs(DropFrame:GetChildren()) do
        if child:IsA("TextButton") then
          child:Destroy()
        end
      end
      if IsOpen then
        for _, opt in pairs(Options) do
          local OptBtn = Linux.Instance("TextButton", {
            Parent = DropFrame,
            BackgroundColor3 = Linux.ActiveTheme.CardBackground,
            BorderColor3 = Linux.ActiveTheme.Border,
            BorderSizePixel = 2,
            Size = UDim2.new(1, -5, 0, 30),
            Font = Enum.Font.Gotham,
            Text = tostring(opt),
            TextColor3 = opt == SelectedValue and Linux.ActiveTheme.Text or Linux.ActiveTheme.SubText,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Center,
            ZIndex = 3,
            AutoButtonColor = false
          })

          Linux.Instance("UICorner", {
            Parent = OptBtn,
            CornerRadius = UDim.new(0, 8)
          })

          Linux.Instance("UIStroke", {
            Parent = OptBtn,
            Color = Linux.ActiveTheme.Border,
            Thickness = 1,
            Transparency = 0.7
          })

          local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
          OptBtn.MouseEnter:Connect(function()
            TweenService:Create(OptBtn, tweenInfo, {Size = UDim2.new(1, -5, 0, 30 * 1.02)}):Play()
          end)

          OptBtn.MouseLeave:Connect(function()
            TweenService:Create(OptBtn, tweenInfo, {Size = UDim2.new(1, -5, 0, 30)}):Play()
          end)

          OptBtn.MouseButton1Click:Connect(function()
            SelectedValue = opt
            Selected.Text = tostring(opt)
            Selected.TextColor3 = Linux.ActiveTheme.Text
            for _, btn in pairs(DropFrame:GetChildren()) do
              if btn:IsA("TextButton") then
                btn.TextColor3 = btn.Text == tostring(opt) and Linux.ActiveTheme.Text or Linux.ActiveTheme.SubText
              end
            end
            Linux:SaveConfig("Dropdown_" .. config.Name, SelectedValue, shouldSave, configFolder)
            IsOpen = false
            PopulateOptions()
            spawn(function() Linux:SafeCallback(config.Callback, opt) end)
          end)
        end
      end
      UpdateDropSize()
    end

    if #Options > 0 then
      PopulateOptions()
      spawn(function() Linux:SafeCallback(config.Callback, SelectedValue) end)
    end

    DropdownButton.MouseButton1Click:Connect(function()
      IsOpen = not IsOpen
      PopulateOptions()
    end)

    local function SetOptions(newOptions)
      Options = newOptions or {}
      SelectedValue = Options[1] or "None"
      Selected.Text = tostring(SelectedValue)
      Selected.TextColor3 = Linux.ActiveTheme.Text
      Linux:SaveConfig("Dropdown_" .. config.Name, SelectedValue, shouldSave, configFolder)
      PopulateOptions()
      spawn(function() Linux:SafeCallback(config.Callback, SelectedValue) end)
    end

    local function SetValue(value)
      if table.find(Options, value) then
        SelectedValue = value
        Selected.Text = tostring(value)
        Selected.TextColor3 = Linux.ActiveTheme.Text
        for _, btn in pairs(DropFrame:GetChildren()) do
          if btn:IsA("TextButton") then
            btn.TextColor3 = btn.Text == tostring(value) and Linux.ActiveTheme.Text or Linux.ActiveTheme.SubText
          end
        end
        Linux:SaveConfig("Dropdown_" .. config.Name, SelectedValue, shouldSave, configFolder)
        spawn(function() Linux:SafeCallback(config.Callback, value) end)
      end
    end

    Container.CanvasPosition = Vector2.new(0, 0)
    return {
      Instance = Dropdown,
      SetOptions = SetOptions,
      SetValue = SetValue,
      GetValue = function() return SelectedValue end
    }
  end

  function TabElements.Slider(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local Slider = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 45),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = Slider,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = Slider,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local TitleLabel = Linux.Instance("TextLabel", {
      Parent = Slider,
      BackgroundTransparency = 1,
      Size = UDim2.new(0.4, 0, 0, 20),
      Position = UDim2.new(0, 10, 0, 2),
      Font = Enum.Font.GothamSemibold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local SliderBar = Linux.Instance("Frame", {
      Parent = Slider,
      BackgroundColor3 = Linux.ActiveTheme.Border,
      Size = UDim2.new(1, -20, 0, 8),
      Position = UDim2.new(0, 10, 0, 28),
      ZIndex = 2,
      BorderSizePixel = 0
    })

    Linux.Instance("UICorner", {
      Parent = SliderBar,
      CornerRadius = UDim.new(1, 0)
    })

    local ValueLabel = Linux.Instance("TextLabel", {
      Parent = Slider,
      BackgroundTransparency = 1,
      Size = UDim2.new(0, 40, 0, 20),
      Position = UDim2.new(1, -50, 0, 2),
      Font = Enum.Font.GothamSemibold,
      Text = "",
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Right,
      ZIndex = 2
    })

    local FillBar = Linux.Instance("Frame", {
      Parent = SliderBar,
      Size = UDim2.new(0, 0, 1, 0),
      Position = UDim2.new(0, 0, 0, 0),
      ZIndex = 2,
      BorderSizePixel = 0
    })

    Linux.Instance("UIGradient", {
      Parent = FillBar,
      Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Linux.ActiveTheme.Primary),
        ColorSequenceKeypoint.new(1, Linux.ActiveTheme.Secondary)
      }),
      Rotation = 45
    })

    Linux.Instance("UICorner", {
      Parent = FillBar,
      CornerRadius = UDim.new(1, 0)
    })

    local SliderKnob = Linux.Instance("Frame", {
      Parent = FillBar,
      BackgroundColor3 = Linux.ActiveTheme.Text,
      Size = UDim2.new(0, 16, 0, 16),
      Position = UDim2.new(1, -8, 0.5, -8),
      ZIndex = 3,
      BorderSizePixel = 0
    })

    Linux.Instance("UICorner", {
      Parent = SliderKnob,
      CornerRadius = UDim.new(1, 0)
    })

    Linux.Instance("UIStroke", {
      Parent = SliderKnob,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local Min = config.Min or 0
    local Max = config.Max or 100
    local Default = Linux:LoadConfig("Slider_" .. config.Name, config.Default or Min, shouldSave, configFolder)
    local Value = Default

    local function AnimateValueLabel()
      local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
      TweenService:Create(ValueLabel, tweenInfo, {TextSize = 16}):Play()
      task.wait(0.25)
      TweenService:Create(ValueLabel, tweenInfo, {TextSize = 14}):Play()
    end

    local function UpdateSlider(pos)
      local barSize = SliderBar.AbsoluteSize.X
      local relativePos = math.clamp((pos - SliderBar.AbsolutePosition.X) / barSize, 0, 1)
      Value = Min + (Max - Min) * relativePos
      Value = math.floor(Value + 0.5)
      FillBar.Size = UDim2.new(relativePos, 0, 1, 0)
      local percentage = math.floor((Value - Min) / (Max - Min) * 100 + 0.5)
      ValueLabel.Text = tostring(percentage) .. "%"
      AnimateValueLabel()
      Linux:SaveConfig("Slider_" .. config.Name, Value, shouldSave, configFolder)
      spawn(function() Linux:SafeCallback(config.Callback, Value) end)
    end

    local draggingSlider = false

    SliderBar.InputBegan:Connect(function(input)
      if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = true
        UpdateSlider(input.Position.X)
      end
    end)

    SliderBar.InputChanged:Connect(function(input)
      if (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) and draggingSlider then
        UpdateSlider(input.Position.X)
      end
    end)

    SliderBar.InputEnded:Connect(function(input)
      if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = false
      end
    end)

    local function SetValue(newValue)
      newValue = math.clamp(newValue, Min, Max)
      Value = math.floor(newValue + 0.5)
      local relativePos = (Value - Min) / (Max - Min)
      FillBar.Size = UDim2.new(relativePos, 0, 1, 0)
      local percentage = math.floor((Value - Min) / (Max - Min) * 100 + 0.5)
      ValueLabel.Text = tostring(percentage) .. "%"
      AnimateValueLabel()
      Linux:SaveConfig("Slider_" .. config.Name, Value, shouldSave, configFolder)
      spawn(function() Linux:SafeCallback(config.Callback, Value) end)
    end

    SetValue(Default)

    Container.CanvasPosition = Vector2.new(0, 0)
    return {
      Instance = Slider,
      SetValue = SetValue,
      GetValue = function() return Value end
    }
  end

  function TabElements.Input(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local Input = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 38),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = Input,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = Input,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    Linux.Instance("TextLabel", {
      Parent = Input,
      BackgroundTransparency = 1,
      Size = UDim2.new(0.5, 0, 1, 0),
      Position = UDim2.new(0, 10, 0, 0),
      Font = Enum.Font.GothamSemibold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local TextBox = Linux.Instance("TextBox", {
      Parent = Input,
      BackgroundColor3 = Color3.fromRGB(
        math.clamp(Linux.ActiveTheme.CardBackground.R * 0.9 * 255, 0, 255),
        math.clamp(Linux.ActiveTheme.CardBackground.G * 0.9 * 255, 0, 255),
        math.clamp(Linux.ActiveTheme.CardBackground.B * 0.9 * 255, 0, 255)
      ),
      BorderSizePixel = 0,
      Size = UDim2.new(0.4, -10, 0, 26),
      Position = UDim2.new(0.6, 0, 0.5, -13),
      Font = Enum.Font.Gotham,
      Text = Linux:LoadConfig("Input_" .. config.Name, config.Default or "", shouldSave, configFolder),
      PlaceholderText = config.Placeholder or "Text Here",
      PlaceholderColor3 = Linux.ActiveTheme.SubText,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 12,
      TextScaled = false,
      TextTruncate = Enum.TextTruncate.AtEnd,
      TextXAlignment = Enum.TextXAlignment.Center,
      ClearTextOnFocus = false,
      ClipsDescendants = true,
      ZIndex = 3
    })

    Linux.Instance("UICorner", {
      Parent = TextBox,
      CornerRadius = UDim.new(0, 6)
    })

    Linux.Instance("UIStroke", {
      Parent = TextBox,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    Linux.Instance("UIPadding", {
      Parent = TextBox,
      PaddingLeft = UDim.new(0, 4),
      PaddingRight = UDim.new(0, 4)
    })

    local MaxLength = 50

    local function CheckTextBounds()
      if #TextBox.Text > MaxLength then
        TextBox.Text = string.sub(TextBox.Text, 1, MaxLength)
      end
    end

    TextBox:GetPropertyChangedSignal("Text"):Connect(function()
      CheckTextBounds()
    end)

    local function UpdateInput()
      CheckTextBounds()
      Linux:SaveConfig("Input_" .. config.Name, TextBox.Text, shouldSave, configFolder)
      spawn(function() Linux:SafeCallback(config.Callback, TextBox.Text) end)
    end

    TextBox.FocusLost:Connect(function(enterPressed)
      if enterPressed then
        UpdateInput()
      end
    end)

    TextBox.InputBegan:Connect(function(input)
      if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        TextBox:CaptureFocus()
      end
    end)

    spawn(function() Linux:SafeCallback(config.Callback, TextBox.Text) end)

    local function SetValue(newValue)
      local text = tostring(newValue)
      if #text > MaxLength then
        text = string.sub(text, 1, MaxLength)
      end
      TextBox.Text = text
      UpdateInput()
    end

    Container.CanvasPosition = Vector2.new(0, 0)
    return {
      Instance = Input,
      SetValue = SetValue,
      GetValue = function() return TextBox.Text end
    }
  end

  function TabElements.Label(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local LabelFrame = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 38),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = LabelFrame,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = LabelFrame,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local LabelText = Linux.Instance("TextLabel", {
      Parent = LabelFrame,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, -20, 1, 0),
      Position = UDim2.new(0, 10, 0, 0),
      Font = Enum.Font.GothamSemibold,
      Text = config.Text or "Label",
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      TextTruncate = Enum.TextTruncate.AtEnd,
      ZIndex = 2
    })

    local UpdateConnection = nil
    local lastUpdate = 0
    local updateInterval = 0.1

    local function StartUpdateLoop()
      if UpdateConnection then
        UpdateConnection:Disconnect()
      end
      if config.UpdateCallback then
        UpdateConnection = RunService.Heartbeat:Connect(function()
          if not LabelFrame:IsDescendantOf(game) then
            UpdateConnection:Disconnect()
            return
          end
          local currentTime = tick()
          if currentTime - lastUpdate >= updateInterval then
            local success, newText = pcall(config.UpdateCallback)
            if success and newText ~= nil then
              LabelText.Text = tostring(newText)
            end
            lastUpdate = currentTime
          end
        end)
      end
    end

    local function SetText(newText)
      if config.UpdateCallback then
        config.Text = tostring(newText)
      else
        LabelText.Text = tostring(newText)
      end
    end

    if config.UpdateCallback then
      StartUpdateLoop()
    end

    Container.CanvasPosition = Vector2.new(0, 0)
    return {
      Instance = LabelFrame,
      SetText = SetText,
      GetText = function() return LabelText.Text end
    }
  end

  function TabElements.Section(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local Section = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, 0, 0, 30),
      AutomaticSize = Enum.AutomaticSize.Y,
      ZIndex = 2,
      LayoutOrder = elementOrder,
      BorderSizePixel = 0
    })

    local SectionLabel = Linux.Instance("TextLabel", {
      Parent = Section,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, -10, 0, 30),
      Position = UDim2.new(0, 5, 0, 0),
      Font = Enum.Font.GothamBold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 18,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local Separator = Linux.Instance("Frame", {
      Parent = Section,
      BackgroundColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 0,
      Size = UDim2.new(1, 0, 0, 1),
      Position = UDim2.new(0, 0, 1, -1),
      ZIndex = 2
    })

    Container.CanvasPosition = Vector2.new(0, 0)
    return Section
  end

  function TabElements.Paragraph(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local ParagraphFrame = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 0),
      AutomaticSize = Enum.AutomaticSize.Y,
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = ParagraphFrame,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = ParagraphFrame,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    Linux.Instance("TextLabel", {
      Parent = ParagraphFrame,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, -20, 0, 25),
      Position = UDim2.new(0, 10, 0, 5),
      Font = Enum.Font.GothamBold,  -20, 0, 25),
      Position = UDim2.new(0, 10, 0, 5),
      Font = Enum.Font.GothamBold,
      Text = config.Title or "Paragraph",
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 16,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local Content = Linux.Instance("TextLabel", {
      Parent = ParagraphFrame,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, -20, 0, 0),
      Position = UDim2.new(0, 10, 0, 30),
      Font = Enum.Font.Gotham,
      Text = config.Content or "Content",
      TextColor3 = Linux.ActiveTheme.SubText,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      TextWrapped = true,
      AutomaticSize = Enum.AutomaticSize.Y,
      ZIndex = 2
    })

    Linux.Instance("UIPadding", {
      Parent = ParagraphFrame,
      PaddingBottom = UDim.new(0, 10)
    })

    local function SetTitle(newTitle)
      ParagraphFrame:GetChildren()[4].Text = tostring(newTitle)
    end

    local function SetContent(newContent)
      Content.Text = tostring(newContent)
    end

    Container.CanvasPosition = Vector2.new(0, 0)
    return {
      Instance = ParagraphFrame,
      SetTitle = SetTitle,
      SetContent = SetContent
    }
  end

  function TabElements.ColorPicker(config)
    elementOrder = elementOrder + 1
    if lastWasDropdown then
      ContainerListLayout.Padding = UDim.new(0, 1)
    else
      ContainerListLayout.Padding = UDim.new(0, 6)
    end
    lastWasDropdown = false

    local ColorPicker = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 38),
      ZIndex = 2,
      LayoutOrder = elementOrder
    })

    Linux.Instance("UICorner", {
      Parent = ColorPicker,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = ColorPicker,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    Linux.Instance("TextLabel", {
      Parent = ColorPicker,
      BackgroundTransparency = 1,
      Size = UDim2.new(0.8, 0, 1, 0),
      Position = UDim2.new(0, 10, 0, 0),
      Font = Enum.Font.GothamSemibold,
      Text = config.Name,
      TextColor3 = Linux.ActiveTheme.Text,
      TextSize = 14,
      TextXAlignment = Enum.TextXAlignment.Left,
      ZIndex = 2
    })

    local DefaultColor = Linux:LoadConfig("ColorPicker_" .. config.Name, config.Default or Color3.fromRGB(255, 255, 255), shouldSave, configFolder)
    if type(DefaultColor) == "table" then
      DefaultColor = Color3.fromRGB(DefaultColor.R, DefaultColor.G, DefaultColor.B)
    end

    local ColorDisplay = Linux.Instance("Frame", {
      Parent = ColorPicker,
      BackgroundColor3 = DefaultColor,
      Size = UDim2.new(0, 30, 0, 20),
      Position = UDim2.new(1, -40, 0.5, -10),
      ZIndex = 2,
      BorderSizePixel = 0
    })

    Linux.Instance("UICorner", {
      Parent = ColorDisplay,
      CornerRadius = UDim.new(0, 4)
    })

    Linux.Instance("UIStroke", {
      Parent = ColorDisplay,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local ColorPickerButton = Linux.Instance("TextButton", {
      Parent = ColorPicker,
      BackgroundTransparency = 1,
      Size = UDim2.new(1, 0, 1, 0),
      Text = "",
      ZIndex = 3
    })

    local ColorPickerFrame = Linux.Instance("Frame", {
      Parent = Container,
      BackgroundColor3 = Linux.ActiveTheme.CardBackground,
      BorderColor3 = Linux.ActiveTheme.Border,
      BorderSizePixel = 2,
      Size = UDim2.new(1, 0, 0, 0),
      Position = UDim2.new(0, 0, 0, 0),
      ZIndex = 4,
      Visible = false,
      LayoutOrder = elementOrder + 1
    })

    Linux.Instance("UICorner", {
      Parent = ColorPickerFrame,
      CornerRadius = UDim.new(0, 8)
    })

    Linux.Instance("UIStroke", {
      Parent = ColorPickerFrame,
      Color = Linux.ActiveTheme.Border,
      Thickness = 1,
      Transparency = 0.7
    })

    local isOpen = false

    ColorPickerButton.MouseButton1Click:Connect(function()
      isOpen = not isOpen
      if isOpen then
        ColorPickerFrame.Size = UDim2.new(1, 0, 0, 120)
        ColorPickerFrame.Visible = true
      else
        ColorPickerFrame.Size = UDim2.new(1, 0, 0, 0)
        ColorPickerFrame.Visible = false
      end
    end)

    local function CreateColorSlider(parent, color, defaultValue, position)
      local SliderFrame = Linux.Instance("Frame", {
        Parent = parent,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -20, 0, 30),
        Position = position,
        ZIndex = 5
      })

      Linux.Instance("TextLabel", {
        Parent = SliderFrame,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 20, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        Font = Enum.Font.GothamSemibold,
        Text = color,
        TextColor3 = Linux.ActiveTheme.Text,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 5
      })

      local SliderBar = Linux.Instance("Frame", {
        Parent = SliderFrame,
        BackgroundColor3 = Linux.ActiveTheme.Border,
        Size = UDim2.new(0.9, -30, 0, 6),
        Position = UDim2.new(0.1, 0, 0.5, -3),
        ZIndex = 5,
        BorderSizePixel = 0
      })

      Linux.Instance("UICorner", {
        Parent = SliderBar,
        CornerRadius = UDim.new(1, 0)
      })

      local FillBar = Linux.Instance("Frame", {
        Parent = SliderBar,
        BackgroundColor3 = color == "R" and Color3.fromRGB(255, 0, 0) or 
                           color == "G" and Color3.fromRGB(0, 255, 0) or 
                           Color3.fromRGB(0, 0, 255),
        Size = UDim2.new(defaultValue/255, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 5,
        BorderSizePixel = 0
      })

      Linux.Instance("UICorner", {
        Parent = FillBar,
        CornerRadius = UDim.new(1, 0)
      })

      local ValueLabel = Linux.Instance("TextLabel", {
        Parent = SliderFrame,
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 30, 1, 0),
        Position = UDim2.new(1, -30, 0, 0),
        Font = Enum.Font.Gotham,
        Text = tostring(defaultValue),
        TextColor3 = Linux.ActiveTheme.Text,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Right,
        ZIndex = 5
      })

      local dragging = false

      SliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
          dragging = true
          local relativePos = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
          local value = math.floor(relativePos * 255)
          FillBar.Size = UDim2.new(relativePos, 0, 1, 0)
          ValueLabel.Text = tostring(value)
          
          local r = color == "R" and value or ColorDisplay.BackgroundColor3.R * 255
          local g = color == "G" and value or ColorDisplay.BackgroundColor3.G * 255
          local b = color == "B" and value or ColorDisplay.BackgroundColor3.B * 255
          ColorDisplay.BackgroundColor3 = Color3.fromRGB(r, g, b)
          
          local newColor = ColorDisplay.BackgroundColor3
          Linux:SaveConfig("ColorPicker_" .. config.Name, {R = newColor.R * 255, G = newColor.G * 255, B = newColor.B * 255}, shouldSave, configFolder)
          spawn(function() Linux:SafeCallback(config.Callback, newColor) end)
        end
      end)

      SliderBar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
          local relativePos = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
          local value = math.floor(relativePos * 255)
          FillBar.Size = UDim2.new(relativePos, 0, 1, 0)
          ValueLabel.Text = tostring(value)
          
          local r = color == "R" and value or ColorDisplay.BackgroundColor3.R * 255
          local g = color == "G" and value or ColorDisplay.BackgroundColor3.G * 255
          local b = color == "B" and value or ColorDisplay.BackgroundColor3.B * 255
          ColorDisplay.BackgroundColor3 = Color3.fromRGB(r, g, b)
          
          local newColor = ColorDisplay.BackgroundColor3
          Linux:SaveConfig("ColorPicker_" .. config.Name, {R = newColor.R * 255, G = newColor.G * 255, B = newColor.B * 255}, shouldSave, configFolder)
          spawn(function() Linux:SafeCallback(config.Callback, newColor) end)
        end
      end)

      SliderBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
          dragging = false
        end
      end)

      return SliderFrame
    end

    CreateColorSlider(ColorPickerFrame, "R", DefaultColor.R * 255, UDim2.new(0, 10, 0, 10))
    CreateColorSlider(ColorPickerFrame, "G", DefaultColor.G * 255, UDim2.new(0, 10, 0, 45))
    CreateColorSlider(ColorPickerFrame, "B", DefaultColor.B * 255, UDim2.new(0, 10, 0, 80))

    local function SetColor(color)
      if typeof(color) == "Color3" then
        ColorDisplay.BackgroundColor3 = color
        Linux:SaveConfig("ColorPicker_" .. config.Name, {R = color.R * 255, G = color.G * 255, B = color.B * 255}, shouldSave, configFolder)
        spawn(function() Linux:SafeCallback(config.Callback, color) end)
        
        for i, child in pairs(ColorPickerFrame:GetChildren()) do
          if child:IsA("Frame") and child.Name == "" then
            local colorLabel = child:FindFirstChildOfClass("TextLabel")
            if colorLabel then
              local color = colorLabel.Text
              local value = color == "R" and ColorDisplay.BackgroundColor3.R * 255 or
                            color == "G" and ColorDisplay.BackgroundColor3.G * 255 or
                            color == "B" and ColorDisplay.BackgroundColor3.B * 255
              
              local valueLabel = child:FindFirstChild("TextLabel", true)
              if valueLabel and valueLabel ~= colorLabel then
                valueLabel.Text = tostring(math.floor(value))
              end
              
              local sliderBar = child:FindFirstChildOfClass("Frame")
              if sliderBar then
                local fillBar = sliderBar:FindFirstChildOfClass("Frame")
                if fillBar then
                  fillBar.Size = UDim2.new(value/255, 0, 1, 0)
                end
              end
            end
          end
        end
      end
    end

    spawn(function() Linux:SafeCallback(config.Callback, DefaultColor) end)

    return {
      Instance = ColorPicker,
      SetColor = SetColor,
      GetColor = function() return ColorDisplay.BackgroundColor3 end
    }
  end

  return TabElements
end

return LinuxLib
end

return Linux
